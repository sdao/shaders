float4x4 WorldXf : World;
float4x4 WitXf : WorldInverseTranspose;
float4x4 ViewIXf : ViewInverse;
float4x4 Wvp : WorldViewProjection;

struct appOutput {
  float4 Position : POSITION;
  float4 Normal : NORMAL;
};

struct vertexOutput {
  float4 Position : POSITION;
  float4 Normal : TEXCOORD1;
};

struct geomOutput {
  float4 Position : POSITION;
  float4 Normal : TEXCOORD1;
  float4 WorldView : TEXCOORD2;
  float4 Color : COLOR;
};

vertexOutput vp(appOutput IN) {
  vertexOutput OUT = (vertexOutput)0;

  OUT.Position = IN.Position;
  OUT.Normal = IN.Normal;

  return OUT;
}

TRIANGLE void gp(AttribArray<float4> Position : POSITION,
                 AttribArray<float4> Normal : TEXCOORD1) {
  float4 n0 = float4(normalize(Normal[0].xyz), 0);
  float4 n1 = float4(normalize(Normal[1].xyz), 0);
  float4 n2 = float4(normalize(Normal[2].xyz), 0);

  float3 w = float3(ViewIXf[0].w, ViewIXf[1].w, ViewIXf[2].w);

  emitVertex(mul(Wvp, Position[0] + n0 * 5.0) : POSITION,
    float4(1, 0, 0, 1) : COLOR,
    mul(WitXf, n0) : TEXCOORD1,
    float4(normalize(w - mul(WorldXf, Position[0]).xyz), 0) : TEXCOORD2);
  emitVertex(mul(Wvp, Position[1] + n1 * 5.0) : POSITION,
    float4(0, 1, 0, 1) : COLOR,
    mul(WitXf, n1) : TEXCOORD1,
    float4(normalize(w - mul(WorldXf, Position[1]).xyz), 0) : TEXCOORD2);
  emitVertex(mul(Wvp, Position[2] + n2 * 5.0) : POSITION,
    float4(0, 0, 1, 1) : COLOR,
    mul(WitXf, n2) : TEXCOORD1,
    float4(normalize(w - mul(WorldXf, Position[2]).xyz), 0) : TEXCOORD2);

  restartStrip();
}

TRIANGLE void gp2(AttribArray<float4> Position : POSITION,
                  AttribArray<float4> Normal : TEXCOORD1) {
  float3 w = float3(ViewIXf[0].w, ViewIXf[1].w, ViewIXf[2].w);

  for (int i = 0; i < 2; i++) {
    float4 n0 = float4(normalize(Normal[i].xyz), 0);
    float4 n1 = float4(normalize(Normal[i + 1].xyz), 0);
    float4 n0_1 = float4(normalize(cross(n0.xyz, n1.xyz)), 0);

    emitVertex(mul(Wvp, Position[i] + n0 * 5.0) : POSITION, float4(1, 0, 0, 1) : COLOR, mul(WitXf, n0) : TEXCOORD1,
      float4(normalize(w - mul(WorldXf, Position[i]).xyz), 0) : TEXCOORD2);
    emitVertex(mul(Wvp, Position[i + 1] + n1 * 7.0) : POSITION, float4(0, 1, 0, 1) : COLOR, mul(WitXf, n1) : TEXCOORD1,
      float4(normalize(w - mul(WorldXf, Position[i + 1]).xyz), 0) : TEXCOORD2);
    emitVertex(mul(Wvp, Position[i + 1] + n1 * 5.0) : POSITION, float4(0, 1, 0, 1) : COLOR, mul(WitXf, n1) : TEXCOORD1,
      float4(normalize(w - mul(WorldXf, Position[i + 1]).xyz), 0) : TEXCOORD2);
  }

  float4 n0 = float4(normalize(Normal[2].xyz), 0);
  float4 n1 = float4(normalize(Normal[0].xyz), 0);
  float4 n0_1 = float4(normalize(cross(n0.xyz, n1.xyz)), 0);

  emitVertex(mul(Wvp, Position[2] + n0 * 5.0) : POSITION, float4(1, 0, 0, 1) : COLOR, mul(WitXf, n0) : TEXCOORD1,
    float4(normalize(w - mul(WorldXf, Position[2]).xyz), 0) : TEXCOORD2);
  emitVertex(mul(Wvp, Position[0] + n1 * 7.0) : POSITION, float4(0, 1, 0, 1) : COLOR, mul(WitXf, n1) : TEXCOORD1,
    float4(normalize(w - mul(WorldXf, Position[0]).xyz), 0) : TEXCOORD2);
  emitVertex(mul(Wvp, Position[0] + n1 * 5.0) : POSITION, float4(0, 1, 0, 1) : COLOR, mul(WitXf, n1) : TEXCOORD1,
    float4(normalize(w - mul(WorldXf, Position[0]).xyz), 0) : TEXCOORD2);

  restartStrip();
}

float4 fp(geomOutput IN) : COLOR {
  float dotProd = dot(IN.WorldView, IN.Normal);
  return float4(IN.Normal.xyz, smoothstep(0.75, 1.0, 1.0 - dotProd));
}

technique main {
  pass p0 {
		DepthTestEnable = true;
		DepthMask = true;
    VertexProgram = compile glslv vp();
    GeometryProgram = compile glslg gp();
    FragmentProgram = compile glslf fp();
  }

  pass p1 {
    BlendEnable = true;
    BlendFunc = int2(SrcAlpha, OneMinusSrcAlpha);
		DepthTestEnable = true;
		DepthMask = false;
    VertexProgram = compile glslv vp();
    GeometryProgram = compile glslg gp2();
    FragmentProgram = compile glslf fp();
  }
}
